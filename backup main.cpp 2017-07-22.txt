#include <SFML/Graphics.hpp>
#include <Windows.h>
#include <iostream>
#include <cmath>

#include "Player.h"
#include "Animation.h"
#include "Level.h"

int main()
{

	//hide console
	ShowWindow(GetConsoleWindow(), SW_HIDE);

	//get screen size
	sf::VideoMode vm(sf::VideoMode::getDesktopMode());
	
	//create window according to the screen résolution
	sf::RenderWindow window(sf::VideoMode(vm.width - 4 ,vm.height - 75), "Dwarf Adventure");
	window.setPosition(sf::Vector2i(-6, 0));
	window.setFramerateLimit(60);



	//BASIC FONT
	sf::Font basicFont;
	if (!basicFont.loadFromFile("Ressources/Font/basic.otf"))
	{
		std::cout << "Load error" << std::endl;
	}


	//FPS text
	sf::Text fpsText("FPS : 0", basicFont, 25);
	sf::Clock fpsClock;

	sf::Clock animClock;

	//PLAYER-------------------------------------------------------
	Player heros("Berserker",5,5,0);

	//sf::Vector2f lastMousePos((float)(vm.width / 2 - 32), (float)(vm.height / 2 - 32));
	sf::Vector2f lastMousePos(0, 0);

	float speed = 4.f;

	//END PLAYER----------------------------------------------------


	Level level("mapDefault_0", "Default");
	level.setOrigin(level.getHerosSpawn());


	while (window.isOpen())
	{

		//FPS
		sf::Time frameTime(fpsClock.restart());
		float fps = 1 / frameTime.asSeconds();
		fpsText.setString("FPS : " + std::to_string((int)floor(fps)));


		//EVENT--------------------------------------------------------------------------
		sf::Event event;

		while (window.pollEvent(event))
		{

			switch (event.type)
			{

			case sf::Event::Closed:
				window.close();
				break;


			
			case sf::Event::KeyReleased:
				//close game
				if (event.key.code == 51)
				{
					window.close();
				}
				break;
			
			


			default:
				break;
			}

			if (event.type == sf::Event::Resized)
			{
				// on met à jour la vue, avec la nouvelle taille de la fenêtre
				sf::FloatRect visibleArea(0, 0, (float)event.size.width, (float)event.size.height);
				window.setView(sf::View(visibleArea));
			}
				
		}
		//END EVENT-----------------------------------------------------------------------

		//PERSONNAGE----------------------------------------------------------------------

		sf::Vector2f movement(0.f, 0.f);
		


		
		if (sf::Mouse::isButtonPressed(sf::Mouse::Right)) //Gère le clique de la souris pour déplacer le personnage
		{
			sf::Vector2i localPosition = sf::Mouse::getPosition(window);

			lastMousePos = sf::Vector2f(localPosition) - sf::Vector2f((float)(vm.width / 2 - 32),(float) (vm.height / 2 - 32)) + heros.getPos();
			
		}

		if (sf::Mouse::isButtonPressed(sf::Mouse::Left)) //Attaque du personnage
		{
			if (!heros.canAttack() && !heros.isInDelay())
			{
				lastMousePos = heros.getPos();
				heros.setAttack(true); //Fait l'attaque

				std::string dir = heros.getDirectionByMouse(sf::Vector2f(sf::Mouse::getPosition(window))- sf::Vector2f((float)(vm.width / 2 - 32),(float) (vm.height / 2 - 32)) + heros.getPos());

				//DIRECTION DES ANIMATIONS
				if (dir == "up")
				{
					heros.setDirection("up"); //animation
				}
				else if (dir == "right")
				{
					heros.setDirection("right");//animation
				}
				else if (dir == "down")
				{
					heros.setDirection("down");//animation
				}
				else if (dir == "left")
				{
					heros.setDirection("left");//animation
				}
			}
			
		}
		

		
		heros.attack(frameTime);
		



		//Fait bouger le personnage selon le dernier clique de souris, tant que la position du héros et du clique sont différents
		if ( (heros.getPos().x > lastMousePos.x + speed || heros.getPos().x < lastMousePos.x - speed) && (heros.getPos().y > lastMousePos.y - speed || heros.getPos().y < lastMousePos.y + speed)) 
		{
			heros.setMoving(true);

			sf::Vector2f herosPos = heros.getPos();

			std::string dir = heros.getDirectionByMouse(lastMousePos);

			if (dir == "up")
			{
				heros.setDirection("up"); //animation
				heros.updateAnimation("walk"); //animation
				heros.setAnimated(true);
			}
			else if (dir == "right")
			{
				heros.setDirection("right");//animation
				heros.updateAnimation("walk");//animation
				heros.setAnimated(true);
			}
			else if (dir == "down")
			{
				heros.setDirection("down");//animation
				heros.updateAnimation("walk");//animation
				heros.setAnimated(true);
			}
			else if (dir == "left")
			{
				heros.setDirection("left");//animation
				heros.updateAnimation("walk");//animation
				heros.setAnimated(true);
			}
			



			//Mouvement, repère 1,y ou x,1
			if (std::abs(lastMousePos.x - herosPos.x) > std::abs(lastMousePos.y - herosPos.y))
			{
				if(lastMousePos.x - herosPos.x > 0)
					movement.x = 1;
				else
					movement.x = -1;

				movement.y = (lastMousePos.y - herosPos.y) / std::abs((lastMousePos.x - herosPos.x));
			}
			else if (std::abs(lastMousePos.x - herosPos.x) < std::abs(lastMousePos.y - herosPos.y))
			{
				movement.x = (lastMousePos.x - herosPos.x) / std::abs((lastMousePos.y - herosPos.y));

				if(lastMousePos.y - herosPos.y > 0)
					movement.y = 1;
				else
					movement.y = -1;
			}
			else
			{
				movement = sf::Vector2f(1, 1);
			}

			movement *= speed; //application de la vitesse de déplacement		
		}
		else
		{
			heros.setMoving(false);
		}


		if((heros.isInDelay()||!heros.canAttack()) && !heros.isMoving())
		{
			heros.setAnimated(false);
		}

		if(!heros.getAnimated()) //Stop l'animation, si aucune ne doit etre joeur
		{
			heros.changeAnimation("stop");
		}


		heros.changeAnimation("play"); //Joue les animations

		heros.changeAnimation("update", frameTime); //Selon le temps



		heros.move(movement); //Change la position du perso

		level.setPosition(sf::Vector2f((float)(vm.width / 2 -96), (float)(vm.height / 2 -96)) - heros.getPos()); //On déplace le niveau

		
		//END PERSONNAGE------------------------------------------------------------------

		//DISPLAY-------------------------------------------------------------------------
		window.clear();

		window.draw(level);

		window.draw(heros);
		

		window.draw(fpsText);
		window.display();
		//END DISPLAY---------------------------------------------------------------------
	}

	return 0;
}